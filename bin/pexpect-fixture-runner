#! /usr/bin/env python

# Copyright (C) 2013  Matias Bordese
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import time
import sys

from pexpect_fixtures import fixture, runner


def _finish_run(process):
    """Check child process terminated, or force a kill if still alive."""
    if process.isalive():
        sys.stdout.write('...killing still running process.\n')
        process.kill(1)
    else:
        sys.stdout.write('-- Exit code: %d\n' % process.exitstatus)


def _build_parser():
    """Return command line arguments parser."""
    parser = argparse.ArgumentParser(
        description='Simple pexpect fixture runner.')
    parser.add_argument(
        'command', action='store', help='Command to run')
    parser.add_argument('fixture', action='store', help='Path to fixture')
    parser.add_argument(
        '--verbose', '-v', action='store', type=int, default=0,
        dest='verbosity_level',
        help='Verbosity level; allowed values: 0 (default), 1, 2')
    parser.add_argument(
        '--timeout', '-t', action='store', type=int, default=2, dest='timeout',
        help='Expect timeout value (default: 2)')
    return parser


def main():
    parser = _build_parser()
    args = parser.parse_args()

    try:
        test_fixture = fixture.load_fixture(args.fixture)
    except fixture.InvalidFixtureError as e:
        sys.stderr.write('Invalid fixture: %s\n' % e.message)
        sys.exit(1)

    try:
        process = runner.run(
            args.command, test_fixture, timeout=args.timeout,
            verbose=args.verbosity_level)
    except runner.ExpectOpError as e:
        sys.stdout.write('\nFAILURE: %s\n' % e.message)
    except Exception as e:
        sys.stderr.write('\nERROR: %s\n' % e.message)
        sys.exit(1)
    else:
        sys.stdout.write('\nSUCCESS\n')
        sys.stdout.write(
            '-- Fixture completed, waiting for process normal exit.\n')
        # wait for normal process exit, if needed
        time.sleep(args.timeout)
        _finish_run(process)
   

if __name__ == '__main__':
    main()
